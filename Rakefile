dev = !ENV.key?("CAMPING_ENV") || ENV["CAMPING_ENV"] == "development"
prod = !dev

desc "Starts the server using rackup for development"
task :start_rackup_development do
  system("rackup _1.1.0_ -p 8005 -E none init/camping.ru")
end

desc "Starts the server using rackup for production"
task :start_rackup_production do
  system("rackup _1.1.0_ -p 8004 -E none -P #{File.dirname(__FILE__)}/tmp/pids/rack.pid init/camping.ru &")
end

desc "Starts the server using rackup for the current environment"
task :start_rackup do
  Rake::Task[dev ? "start_rackup_development" : "start_rackup_production"].invoke
end

task :sr => :start_rackup

task :stop_rackup_production do
  #Find out why failing in monit
#  system("kill `cat tmp/pids/rack.pid`") if File.exists?("tmp/pids/rack.pid")
#  sleep(5)
  system("kill -9 `cat tmp/pids/rack.pid`") if File.exists?("tmp/pids/rack.pid")
end

task :restart_rackup_production => [:stop_rackup_production, :start_rackup_production] #test
  

desc "Starts the server using camping's builtin server"
task :start_camping do
  #bad example with ARGV
  system("scripts/camping.rb #{ARGV[1]}")
end

task :sc => :start_camping



desc "Clear caches"
task :clear_caches do
  Dir.glob("./*/public/cache/*").each { |dir| FileUtils.rm(dir) }
end



desc "Generate nginx configuration"
task :generate_nginx_config do
  require 'date'
  f = File.open("/www/camping_apps/shared/lib/camping_apps.conf", "w")
  
  f << "# DO NOT EDIT this file; it was generated by #{__FILE__} at #{DateTime.now.strftime("%d/%m/%Y %I:%M%p")}\n\n"

  Dir.glob("*.rb").map { |d| File.basename(d, ".rb") }.each do |name|
    f << <<-EOF
# Configuration for #{name}
server {
  listen 80;
  server_name www.#{name}.bloople.net;
  rewrite ^/(.*) http://#{name}.bloople.net/$1 permanent;
}

server {
  listen 80;
  server_name #{name}.bloople.net;

  location / {
    root /www/camping_apps/current/#{name}/public/;
    index /;
    if (!-f $request_filename) {
      rewrite ^/(.*) /#{name}/$1 break;
      proxy_pass http://127.0.0.1:8004;
    }
    include /etc/nginx/proxy.conf;
  }
}

EOF
  end

  f.close
end